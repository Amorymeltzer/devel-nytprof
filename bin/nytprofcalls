#!/usr/bin/perl
##########################################################
# This script is part of the Devel::NYTProf distribution
#
# Copyright, contact and other information can be found
# at the bottom of this file, or by going to:
# http://search.cpan.org/dist/Devel-NYTProf/
#
##########################################################

use warnings;
use strict;

use Devel::NYTProf::Core;
require Devel::NYTProf::Data;

our $VERSION = '4.23';
    
if ($VERSION != $Devel::NYTProf::Core::VERSION) {
    die "$0 version '$VERSION' doesn't match version '$Devel::NYTProf::Core::VERSION' of $INC{'Devel/NYTProf/Core.pm'}\n";
}

use Getopt::Long;
use Carp;

GetOptions(
    'help|h'    => \&usage,
    'verbose|v' => \my $opt_verbose,
    'debug|d' => \my $opt_debug,
) or usage();
$opt_verbose ||= 1
    if $opt_debug;

usage() unless @ARGV;


# We're building a tree structure from a stream of "subroutine returned" events.
# (We use these because the subroutine entry events don't have reliable
# value for the subroutine name, and obviously don't have timings.)
#
# Building a call tree from return events is a little ticky because they don't
# appear in natural order. The code can return from a call at any depth
# deeper than the last seen depth.
#
# Our primary data structure is an array of arrays where the outer array is
# indexed by call depth. The inner arrays are call frames at that depth
# and they hold a ref to the parent call frame.
my @depthstacks = (); # depth stacks
# [
#   [
#       [ undef, sub1, ... ]        <= ref1
#   ]
#   [
#       [ ref1, sub2, ... ]         <= ref2
#   ]
#   [
#       [ ref2, ]                   <= ref3 = crnt_node, eg
#   ]
#   [
#       [ ref4, sub3, ... ]         <= ref3
#   ]
# ]
my $crnt_depth = 0;
my $crnt_node = undef;

my $last_subid = 0;
my %subname2id;

my $callbacks = {
    SUB_ENTRY => sub {
        my (undef, $fid, $line) = @_;
        print "> at $fid:$line\n" if $opt_verbose;
    },
    SUB_RETURN => sub {
        # $retn_depth is the call stack depth of the sub call we're returning from
        my (undef, $retn_depth, undef, $excl_time, $subname) = @_;
        warn sprintf "< %2d %-10s %s\n", $retn_depth, $subname, $excl_time
            if $opt_verbose;
        my $subid = $subname2id{$subname} ||= ++$last_subid;

        # $crnt_node is the node representing the sub we're returning out of.
        # Either...
        # a) we're returning from some sub deeper than the last one we saw
        #    in which case we build out the tree and set $crnt_node to the last node
        #    and then fall through to:
        # b) we're returning from the last sub we saw and update @$crnt_node

        die "return from depth $retn_depth while at depth $crnt_depth implies missing data ($subname)"
            if $crnt_depth > $retn_depth;

        while ($crnt_depth < $retn_depth) { # build out the tree if needed
            my $x = $depthstacks[$crnt_depth] ||= do {
                warn "added depth $crnt_depth\n" if $opt_debug;
                [];
            };
            # Sadly, getting smarter here about reusing an existing child node
            # is non-trivial. We could use a hash but we'd have to have logic
            # for merging the trees below the hashes.
            $crnt_node = [ $crnt_node, undef, undef ];
            #push @$crnt_node, $crnt_depth; # debug
            push @$x, $crnt_node;
            $crnt_depth++;
        }

        # now $retn_depth == $crnt_depth
        die "panic: returning to a non-empty node" if $crnt_node->[1];

        $crnt_node->[1] ||= $subid;
        $crnt_node->[2] += $excl_time;

        warn "RETURN FROM: ".dump_node($crnt_node, 1)."\n" if $opt_debug;
        # move up to parent node - ie do the "return"
        $crnt_node = $crnt_node->[0];
        $crnt_depth = $retn_depth - 1;
    },
};

sub dump_node {
    my ($n, $show_parents) = @_;
    return ""  if not ref $n;
    my ($parent, @f) = @$n;
    defined $_ or $_ = "undef" for (@f);
    my $node_dump = sprintf "[ %s ]%s", join(",", @f), $n;
    $node_dump .= " < ".dump_node($parent, --$show_parents)
        if ref $parent and $show_parents;
    return $node_dump;
}

foreach my $input (@ARGV) {
    warn "Reading $input...\n" if $opt_verbose;
    Devel::NYTProf::Data->new({
        filename => $input,
        quiet => 1,
        callback => $callbacks
    });
}

my %subid2name = reverse %subname2id;

for my $ds (@depthstacks) {
    # generate "sub1;sub2;sub3 count\n" where count is the ticks spent with that call stack
    for my $n (@$ds) {
        my @subs;
        my $ticks;
        while ($n) {
            my ($parent, $subid, $excl_time) = @$n;
            my $subname = $subid2name{$subid} || $subid;
            push @subs, $subname;
            $ticks += $excl_time;
            $n = $parent;
        }
        # ensure we don't have any characters flamegraph.pl relies on for parsing
        s/[ ;]/?/g for @subs;
        my $path = join ";", reverse @subs;
        print "$path $ticks\n";
    }
}

warn "Done.\n" if $opt_verbose;
exit 0;

sub usage {
    print <<END;
usage: [perl] nytprofcalls [opts] nytprof-file [...]

 --help,        -h         Print this message
 --verbose,     -v         Be more verbose

This script of part of the Devel::NYTProf distribution.
See https://metacpan.org/release/Devel-NYTProf for details and copyright.
END
    exit 0;
}

__END__

=head1 NAME

nytprofcalls - experimental

=cut
# vim:ts=8:sw=4:et
